plugins {
    id 'java'
}

compileJava.options.encoding = 'UTF-8'
group 'ch.konnexions'
version '1.1.0'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.google.guava:guava:31.0.1-jre'
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
    implementation 'com.oracle.database.jdbc:ojdbc11:21.3.0.0'
    implementation 'commons-beanutils:commons-beanutils:1.9.4'
    implementation 'commons-codec:commons-codec:1.15'
    implementation 'org.apache.commons:commons-configuration2:2.7'
    implementation 'org.apache.commons:commons-csv:1.9.0'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.apache.commons:commons-math3:3.6.1'
    implementation 'org.apache.commons:commons-text:1.9'
    implementation 'org.apache.logging.log4j:log4j-api:2.17.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.17.0'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.17.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

jar {
    archivesBaseName = project.name
    duplicatesStrategy = DuplicatesStrategy.INCLUDE // allow duplicates
    zip64 = true

    manifest {
        attributes 'Main-Class': 'ch.konnexions.orabench.OraBench'
        attributes 'Multi-Release': 'true'
    }
}

task fatJar(type: Jar) {
    group = "Konnexions"
    description = 'Create a jar file including all dependencies'
    duplicatesStrategy = DuplicatesStrategy.INCLUDE // allow duplicates

    manifest.from jar.manifest
    archiveClassifier.set("all")
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}

task copyJarToLib(type: Copy, dependsOn: 'fatJar') {
    group = "Konnexions"
    description = 'Copy the jar file to the lib directory'

    from "$buildDir/libs"
    rename project.name + '-' + version + '-all.jar', project.name + '_java.jar'
    into "../../priv/libs"
}

tasks.withType(JavaCompile).each {
    it.options.compilerArgs.add('-deprecation')
    it.options.compilerArgs.add('-Xlint:unchecked')
}
